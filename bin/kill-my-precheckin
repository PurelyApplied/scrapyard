usage() {
    echo "Usage: ${0} [-diny] <tag match string>"
    echo "Kills any developer pipeline whose tag matches <tag match string>"
    echo
    echo "-d  : Dry run"
    echo "-i  : Prompt each destruction individually"
    echo "-n  : Passed to destruction script -- nuke without collecting artifacts."
    echo "-y  : Skip initial confirmation prompt."
    echo
    echo "Expects GEMFIRE_DEPLOYMENTS_ROOT to point to gemfire-deployments root directory."
    echo "Your GEMFIRE_DEPLOYMENTS_ROOT: ${GEMFIRE_DEPLOYMENTS_ROOT}"
}

dry="n"
prompt_each="n"
nuke=""
skip_prompt="n"
while getopts "diny" opt; do
    case $opt in
        d)
            dry="y"
            ;;
        i)
            prompt_each="y"
            ;;
        n)
            nuke=" -n"
            ;;
        y)
            skip_prompt="y"
            ;;
    esac
done
shift $((OPTIND-1))

if [ $# -lt 1 ] ; then
    usage
    exit 1
fi

LIST=${GEMFIRE_DEPLOYMENTS_ROOT}/precheckin/list_developer_pipelines.sh
DESTROY=${GEMFIRE_DEPLOYMENTS_ROOT}/precheckin/destroy_developer_pipeline.sh

INSTANCES=($($LIST | grep ${1}))
echo "To destroy the following instances:"
for f in ${INSTANCES[@]} ; do
    echo "  ${f}"
done
echo

if [ ! ${skip_prompt} ] ; then
    printf "Destroy these instances?  (y/n) >> "
    read YN
else
    YN="y"
fi

if [ ! ${YN} -o ! ${YN} == 'y' ] ; then
    exit 0
fi

for f in ${INSTANCES[@]} ; do
    CMD="${DESTROY}${nuke} ${f}"
    echo ${CMD}
    if [ "${dry}" != "y" ] ; then
        if [ ! ${prompt_each} ] ; then
            echo "y" | ${CMD}
        else
            ${CMD}
        fi
    fi
done
